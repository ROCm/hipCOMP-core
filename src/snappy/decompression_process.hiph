/*
 * Copyright (c) 2018, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// MIT License
//
// Modifications Copyright (C) 2023-2024 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef SNAPPY_DECOMPRESSION_PROCESS_HIPH
#define SNAPPY_DECOMPRESSION_PROCESS_HIPH

#include "device_types.h"
#include "device_functions.hiph"
#include "snappy/config.h"
#include "snappy/types.h"
#include "snappy/symbol.hiph"
#include "snappy/decompression_state.hiph"

#define READ_BYTE(pos) s->q.buf[(pos) & (PREFETCH_SIZE - 1)]

namespace hipcomp
{
  namespace snappy
  {

    /**
     * \brief Process LZ77 symbols and output uncompressed stream
     *
     * \note No error checks at this stage (WARP0 responsible for not sending offsets and lengths that
     * would result in out-of-bounds accesses)
     */
    template <typename GROUPMASK_T, typename WARPMASK_T>
    class ProcessSymbols
    {
    private:
      static constexpr unsigned GROUPSIZE= sizeof(GROUPMASK_T) * 8;
      static constexpr unsigned WARPSIZE = sizeof(WARPMASK_T) * 8;
      static constexpr GROUPMASK_T GROUPMASK_ZERO = 0;
      static constexpr GROUPMASK_T GROUPMASK_ONE = 1;
      static constexpr GROUPMASK_T GROUPMASK_TWO = 2;

    public:
      /**
       *  \brief Applies the strategy.
       *
       * \param[inout] s decompression state
       * \param[ino] t thread id within participating group (lane id)
       * \todo Currently only works for GROUP_MASK_T == WARP_MASK_T
       */
      __device__ static inline void apply(unsnap_state_s *s, int t)
      {
        const uint8_t *literal_base = s->base;
        uint8_t *out = reinterpret_cast<uint8_t *>(s->in.dstDevice);
        int batch = 0;

        do
        {
          volatile LZ77Symbol *b = &s->q.batch[batch * BATCH_SIZE];
          int32_t batch_len, blen_t, dist_t;

          if (t == 0)
          {
            while ((batch_len = s->q.batch_len[batch]) == 0)
            {
              NANOSLEEP(PROCESS_SLEEP_NS);
            }
          }
          else
          {
            batch_len = 0;
          }
          batch_len = SHFL10(batch_len);
          if (batch_len <= 0)
          {
            break;
          }
          if (t < batch_len)
          { //: batch_len is bounded by GROUPSIZE of decoder
            b[t].get(blen_t, dist_t);
            //: blen_t = b[t].len;
            //: dist_t = b[t].offset;
          }
          else
          {
            blen_t = dist_t = 0;
          }
          // Try to combine as many small entries as possible, but try to avoid doing that
          // if we see a small repeat distance 8 bytes or less
          if (SHFL10(min((uint32_t)dist_t, (uint32_t)SHFL1_XOR(dist_t, 1))) > 8)
          { //: thread 0 broadcasts its result
            uint32_t n;
            do
            {
              uint32_t bofs = WarpReduce<GROUPSIZE, WARPSIZE>::prefix_sum(t, blen_t);
              //: uint32_t bofs          = WarpReducePos(blen_t, t);
              warp_mask_t stop_mask = ballot1<GROUPMASK_T, WARPSIZE>(t, (uint32_t)dist_t < bofs); //: copies: dist_t < bofs implies that this/another lane of this warp currently decodes the input data
                                                                                                  //: literals: Always have negative dist_t, so this is always a stop
              warp_mask_t start_mask = WarpReduce<GROUPSIZE, WARPSIZE>::sum(t, (bofs < GROUPSIZE && t < batch_len) ? GROUPMASK_ONE << bofs : GROUPMASK_ZERO);
              //: warp_mask_t start_mask = WarpReduceSum((bofs < GROUPSIZE && t < batch_len) ? GROUPMASK_ONE << bofs : GROUPMASK_ZERO);
              n = min(min((uint32_t)num_set_bits(start_mask), (uint32_t)(find_first_set_bit(stop_mask) - 1u)),
                      (uint32_t)batch_len); //: n is bounded by GROUPSIZE
              if (n != 0)
              {
                uint32_t it = num_set_bits(start_mask & ((GROUPMASK_TWO << t) - 1));
                uint32_t tr = t - SHFL1(bofs - blen_t, it);
                int32_t dist = SHFL1(dist_t, it);
                if (it < n)
                {
                  const uint8_t *src = (dist > 0) ? (out + t - dist) : (literal_base + tr - dist);
                  out[t] = *src;
                }
                out += SHFL1(bofs, n - 1);
                blen_t = SHFL1(blen_t, (n + t) & (GROUPSIZE - 1));
                dist_t = SHFL1(dist_t, (n + t) & (GROUPSIZE - 1));
                batch_len -= n;
              }
            } while (n >= 4);
          }
          uint32_t current_prefetch_wrpos = s->q.prefetch_wrpos;
          for (int i = 0; i < batch_len; i++)
          { //: batch_len is bounded by GROUPSIZE of decoder
            int32_t blen = SHFL1(blen_t, i);
            int32_t dist = SHFL1(dist_t, i);
            int32_t blen2 = (i + 1 < batch_len) ? SHFL1(blen_t, i + 1) : GROUPSIZE;
            // Try to combine consecutive small entries if they are independent
            if ((uint32_t)dist >= (uint32_t)blen && blen + blen2 <= GROUPSIZE)
            {
              int32_t dist2 = SHFL1(dist_t, i + 1);
              if ((uint32_t)dist2 >= (uint32_t)(blen + blen2))
              {
                int32_t d;
                if (t < blen)
                {
                  d = dist;
                }
                else
                {
                  dist = dist2;
                  d = (dist2 <= 0) ? dist2 + blen : dist2;
                }
                blen += blen2;
                if (t < blen)
                {
                  const uint8_t *src = (dist > 0) ? (out - d) : (literal_base - d);
                  out[t] = src[t];
                }
                out += blen;
                i++;
                continue;
              }
            }
            if (dist > 0)
            {
              // Copy
              uint8_t b0, b1;
              if (t < blen)
              {
                uint32_t pos = t;
                const uint8_t *src = out + ((pos >= dist) ? (pos % dist) : pos) - dist;
                b0 = *src;
              }
              if (GROUPSIZE + t < blen)
              {
                uint32_t pos = GROUPSIZE + t;
                const uint8_t *src = out + ((pos >= dist) ? (pos % dist) : pos) - dist;
                b1 = *src;
              }
              if (t < blen)
              {
                out[t] = b0;
              }
              if (GROUPSIZE + t < blen)
              {
                out[GROUPSIZE + t] = b1;
              }
            }
            else
            {
              // Literal
              uint8_t b[LITERAL_SECTORS];
              dist = -dist;
#pragma unroll 1
              for (int k = 0; k < blen / (LITERAL_SECTORS * GROUPSIZE); ++k)
              {
                if (dist + LITERAL_SECTORS * GROUPSIZE < current_prefetch_wrpos)
                {
                  //: i hides higher-scope i
                  for (int i = 0; i < LITERAL_SECTORS; ++i)
                    b[i] = READ_BYTE(dist + i * GROUPSIZE + t);
                }
                else
                {
                  //: i hides higher-scope i
                  for (int i = 0; i < LITERAL_SECTORS; ++i)
                    b[i] = literal_base[dist + i * GROUPSIZE + t];
                }
                for (int i = 0; i < LITERAL_SECTORS; ++i)
                  //: i hides higher-scope i
                  out[i * GROUPSIZE + t] = b[i];
                dist += LITERAL_SECTORS * GROUPSIZE;
                out += LITERAL_SECTORS * GROUPSIZE;
              }
              blen %= LITERAL_SECTORS * GROUPSIZE;
              //: similar as above body, but with check `if (i * GROUPSIZE + t < blen)`
              if (dist + blen < current_prefetch_wrpos)
              {
                for (int i = 0; i < LITERAL_SECTORS; ++i)
                  //: i hides higher-scope i
                  if (i * GROUPSIZE + t < blen)
                    b[i] = READ_BYTE(dist + i * GROUPSIZE + t);
              }
              else
              {
                for (int i = 0; i < LITERAL_SECTORS; ++i)
                  //: i hides higher-scope i
                  if (i * GROUPSIZE + t < blen)
                    b[i] = literal_base[dist + i * GROUPSIZE + t];
              }
              for (int i = 0; i < LITERAL_SECTORS; ++i)
                if (i * GROUPSIZE + t < blen)
                  out[i * GROUPSIZE + t] = b[i];
              //: end similar as above
            }
            out += blen;
          }
          SYNCWARP();
          if (t == 0)
          {
            s->q.prefetch_rdpos = s->q.batch_prefetch_rdpos[batch];
            s->q.batch_len[batch] = 0;
          }
          batch = (batch + 1) & (BATCH_COUNT - 1);
        } while (1);
      }
    };

  } // namespace snappy
} // namespace hipcomp

#endif // SNAPPY_DECOMPRESSION_PROCESS_HIPH